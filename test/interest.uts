# -*- mode: python -*-

% Regression tests for Scapy Interest

############
############
+ Tests on Interest and related packets

= Nonce tests

from scapyndn.pkt import NdnLenField, NameComponent, \
                         TYPES, COMP_TYPES, Interest, Name, Nonce

n = Nonce(b"\x0A\x04\x00\x00\x00\x20")
assert n.type   == TYPES["Nonce"]
assert n.length == 4
assert n.value  == 0x20

n = Nonce(b"\x0B\x04\x00\x00\x00\x20")
assert n.type == None

= Interest Tests

n = Name(value=NameComponent(value="test1") / NameComponent(value="test2"))
i = Interest(value=n/Nonce(value=32))

assert raw(i) == b"\x05\x16\x07\x0E\x08\x05\x74\x65\x73\x74\x31\x08\x05\x74\x65\x73\x74\x32\x0A\x04\x00\x00\x00\x20"

# Correct order:
i = Interest(b"\x05\x14\x07\x0E\x08\x05\x74\x65\x73\x74\x31\x08\x05\x74\x65\x73\x74\x32\x21\x12")
assert "CanBePrefix" in i

# Wrong order:
i = Interest(b"\x05\x14\x07\x0E\x08\x05\x74\x65\x73\x74\x31\x08\x05\x74\x65\x73\x74\x32\x12\x21")
assert "MustBeFresh" in i

# 00 before MustBeFresh
i = Interest(b"\x05\x14\x07\x0E\x08\x05\x74\x65\x73\x74\x31\x08\x05\x74\x65\x73\x74\x32\x00\x12")
assert "Raw" in i

# 00 for both at the end
i = Interest(b"\x05\x14\x07\x0E\x08\x05\x74\x65\x73\x74\x31\x08\x05\x74\x65\x73\x74\x32\x00\x00")
assert "Raw" in i

# Extra zeros (more than the length)
i = Interest(b"\x05\x14\x07\x0E\x08\x05\x74\x65\x73\x74\x31\x08\x05\x74\x65\x73\x74\x32\x00\x00\x00\x00\x00")
assert "Raw" in i
assert "Padding" in i

= Signed Interest Test

# V2 command Interest from NLSR:
#i  = Interest(b"\x05\xDB\x07\xD3\x08\x09\x6C\x6F\x63\x61\x6C\x68\x6F\x73\x74\x08\x04\x6E\x6C\x73\x72\x08\x0D\x70\x72\x65\x66\x69\x78\x2D\x75\x70\x64\x61\x74\x65\x08\x09\x61\x64\x76\x65\x72\x74\x69\x73\x65\x08\x1B\x68\x19\x07\x17\x08\x06\x70\x72\x65\x66\x69\x78\x08\x02\x74\x6F\x08\x09\x61\x64\x76\x65\x72\x74\x69\x73\x65\x08\x08\x00\x00\x01\x49\x9D\x59\x8C\xAA\x08\x08\x31\xAF\x4F\x58\x0C\x11\xB0\x8A\x08\x2A\x16\x28\x1B\x01\x03\x1C\x23\x07\x21\x08\x04\x73\x69\x74\x65\x08\x0A\xC1\x2E\x4F\x70\x65\x72\x61\x74\x6F\x72\x08\x03\x4B\x45\x59\x08\x08\xD1\x70\xC8\x96\x7A\x45\xFD\x85\x08\x49\x17\x47\x30\x45\x02\x21\x00\xC3\xE2\xC1\x5B\xAF\x5E\x65\x77\xF6\xD9\xFA\xD1\xF9\xE3\x83\x9E\xC5\x59\x80\xBF\x5F\x2F\x15\xFF\xC5\x05\x7A\xD8\xCB\x21\xFC\x88\x02\x20\x16\xA7\x3D\xAA\x31\x38\xF0\x98\x6D\xEF\x36\xF4\xDF\x3E\xCF\x42\xD3\xF9\x7D\x2F\xCD\x35\xE6\x86\x1B\x2B\xB0\x05\x73\x20\x54\x9A\x0A\x04\x4F\x44\xCD\x2F")
#i.show2()
#hexdump(i)

# Test for Interest with various fields (for NonNegativeInteger - so that it is decoded correctly)

# name = Name(value=NameComponent(value="test1") / NameComponent(value="test2"))
#n = Interest(value=name / CanBePrefix() / Nonce(value=35456465) / InterestLifetime(value=1000) / MustBeFresh())

