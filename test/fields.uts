% Regression tests for Scapy NDN regarding NdnLenField and NdnTypeField

############
############
+ Tests on NDN basic fields

= Ndn Length Field tests

#import sys
#print(sys.path)

from ndn import NdnLenField, NameComponent, TYPES

# Empty
assert NdnLenField().addfield(Raw(""), b"\x08", None) == b"\x08"
assert NdnLenField().addfield(None, b"", None) == b""

# Already defined length
assert NdnLenField().addfield(None, b"", 8) == b"\x08"

# Length of value="test" is 4
assert NdnLenField().addfield(Raw("test"), b"\x08", None) == b"\x08\x04"
# NameComponent contains the type and length fields which should be skipped when calculating length
assert NdnLenField().addfield(NameComponent(value="test"), b"\x08", None) == b"\x08\x04"

p = "test" * 1000
assert NdnLenField().addfield(Raw(p), b"\x08", None) == b"\x08\xfd\x0f\xa0"

q = "test" * 100000
assert NdnLenField().addfield(Raw(q), b"\x08", None) == b"\x08\xfe\x00\x06\x1a\x80"

# Takes time to run:
# r = "test" * 2000000000
# assert NdnLenField().addfield(Raw(r), b"\x08", None) == b'\x08\xff\x00\x00\x00\x01\xdc\xd6\x50\x00'

assert NdnLenField().getfield(None, b"") == (None, None)
assert NdnLenField().getfield(None, b"\x04test") == (b"test", 4)

# Technically illegal packet - but someone should be able to form
assert NdnLenField().getfield(None, b"\x04tes") == (b"tes", 4)
assert NdnLenField().getfield(None, b"\xfd\x0f\xa0" + p.encode('ascii')) == (p.encode('ascii'), 4000)
assert NdnLenField().getfield(None, b"\xfe\x00\x06\x1a\x80" + q.encode('ascii')) == (q.encode('ascii'), 400000)
# Test w/o value - too slow/resource intensive
# assert NdnLenField().getfield(None, b"\xff\x00\x00\x00\x01\xdc\xd6\x50\x00") == ("", 8000000000)


= Name Component tests

nc = NameComponent(value="ndn-cxx")
assert nc.type == TYPES['GenericNameComponent']
# Not calculated yet
assert nc.length == None
assert nc.value == b"ndn-cxx"

rnc = raw(nc)
bnc = NameComponent(rnc)
assert bnc.length == 0x7
assert len(nc) == 9
assert rnc == b"\x08\x07\x6E\x64\x6E\x2D\x63\x78\x78"

nc = NameComponent(type=140, value="ndn-cxx")
assert nc.type == 140

nc = NameComponent(value="")

# Test NameComponent field boundaries/padding according to length
#nc = NameComponent(b"\x08\x07\x6E\x64\x6E\x2D\x63\x78\x78\x00\x00")
#assert raw(nc.payload) == b"\x00\x00"

# Non negative integer test
#for item in [ (20, 1, b"\x14"), (4500, 2, b"\x11\x94"), (70000, 4, b"\x00\x01\x11\x70"),
#              (4294967296, 8, b"\x00\x00\x00\x01\x00\x00\x00\x00") ]:
#    nc = NameComponent(value=item[0])
#    assert nc.type == TYPES['GenericNameComponent']
#    assert nc.to_number() == item[0]
#    assert nc.length == item[1]
#    assert nc.value == item[2]

#nc = NameComponent(value="v=20")
#assert nc.type ==