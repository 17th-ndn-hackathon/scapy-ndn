# -*- mode: python -*-
% Regression tests for NFD status

############
############
+ Tests on NFD mgmt

= NFD status content resolve

# Scapy also import everything in its tests (for bind_layers etc. to be set)
from scapyndn.pkt import *
from scapyndn.contents.nfd import *

status_bytes = b'\x06\x9c\x07(\x08\tlocalhost\x08\x03nfd\x08\x03fib\x08\x04list6\x08\x00\x00\x01\x8b\xb6M\xa3'      + \
               b'\xc92\x01\x00\x14\t\x19\x02\x03\xe8\x1a\x032\x01\x00\x15>\x80 \x07\x15\x08\tlocalhost\x08\x03nfd'  + \
               b'\x08\x03rib\x81\x07i\x02\x01\x02j\x01\x00\x80\x1a\x07\x10\x08\tlocalhost\x08\x03nfd\x81\x06i\x01'  + \
               b'\x01j\x01\x00\x16\x03\x1b\x01\x00\x17 \xdb\xccv -$\x8e\xfds\x9f\x9cq\x06\x8c\t\x98q\x9dQ\xdc\xb4H' + \
               b'\xa0\xedG\xcb\xa2\xf6\xa0\xc9\xb2\xd2'

d = Data(status_bytes)

d.show2()

assert "Content" in d
assert "SignatureInfo" in d
assert "DigestSha256SignatureValue" in d
assert "NfdFib" in d["Content"]
assert "Name" in d["Content"]["NfdFib"]
assert "NextHopRecord" in d["Content"]["NfdFib"]

for fib in d["Content"].value:
    assert isinstance(fib, NfdFib)
    rib = False
    for pkt in fib.value:
        if isinstance(pkt, Name):
            if "/localhost/nfd/rib" in pkt.to_uri():
                rib = True
        if isinstance(pkt, NextHopRecord):
            if rib is True:
                assert pkt["FaceId"].value == 258
                assert pkt["Cost"].value   == 0
            else:
                assert pkt["FaceId"].value == 1
                assert pkt["Cost"].value   == 0

= NFD Route Register

register_interest_bytes = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00E\x00\x01<\xdf\x1d@\x00@\x06\\\x9c\x7f\x00\x00\x01\x7f\x00\x00\x01\x81\xe0\x18\xdb\x07S%\xb8a\x83\xf3\xc7\x80\x18\x02\x00\xff0\x00\x00\x01\x01\x08\n\xbd\x12\x93\xfb\xbd\x12\x93\xf7\x05\xfd\x01\x04\x07_\x08\tlocalhost\x08\x03nfd\x08\x03rib\x08\x08register\x08\x1ch\x1a\x07\x0b\x08\x04test\x08\x03ndni\x02\x01\x03o\x01\xffj\x01dl\x01\x01\x02 \x11\x05\xc4\x8b6wT\xd2\x1b\xab\xe8l\xbb\x10rI\xe4\x17\x07?\xa9k\x03\x96\xc2\x17\xf7UD\xdf G\n\x04\xbb\x80\x1e\xfe$\x00,O\x1b\x01\x03\x1c6\x074\x08\tlocalhost\x08\x08operator\x08\x03KEY\x08\x08\xe7B\x1bx"\x91\xed\xe0\x08\x04self6\x08\x00\x00\x01\x8b\xb1\xdaH\xdd&\x08^\xdd\x0c\xacn\x1e\xde\xca(\x08\x00\x00\x01\x8cVLU\xd3.H0F\x02!\x00\xce\x90.\xb0\xa0\xca\x82k\xb9hC\xbb\xd3\x9dl\x00\x0b\x7fUz\xee\x14\xca\xbc\xcef}\xcf\x87\x8a\xad4\x02!\x00\xecE\r\x87?\xdc@\x1dc\xf2\xf4\xf2\x1a\xe7M]K\x8du\xc5o3s\x1cN\xe3\xbf\x8fh<G\xd3'

#reg_pkt = Ether(register_interest_bytes)

#reg_pkt.show2()

#assert reg_pkt["Interest"]["Nonce"].value == 0xbb801efe
#assert reg_pkt["Interest"]["InterestSignatureInfo"]["SignatureType"].value == 3
#assert "ECDSASignatureValue" in reg_pkt["Interest"]
